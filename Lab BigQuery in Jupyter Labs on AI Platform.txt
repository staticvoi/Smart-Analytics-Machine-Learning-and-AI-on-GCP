Open BigQuery Console
In the Google Cloud Console, select Navigation menu > BigQuery:

BigQuery_menu.png

The Welcome to BigQuery in the Cloud Console message box opens. This message box provides a link to the quickstart guide and lists UI updates.

Click Done.

Start a JupyterLab Notebook Instance
Navigate to the search bar in the GCP console and type in Notebook.
Select Notebooks for AI Platform.
0.png

You'll be redirected to a page for notebook instances on AI Platform. Click on the NEW INSTANCE icon on the top of the page.

In the menu that pops down, select the Python option.

AIP_Python_Base.png

A screen titled New notebook instance will be shown. Leave the default options and click on CREATE.

After a few minutes, the AI Platform Notebooks console will have your instance name followed by OPEN JUPYTERLAB. Click OPEN JUPYTERLAB.

2.png

A new tab will open in your browser with the JupyterLab environment. Select Python 3 under Notebook.
3.png

Your notebook is now set up.

Click Check my progress to verify the objective.
Start a JupyterLab Notebook Instance.

Execute a BigQuery query
Enter the following query in the first cell of the notebook.

%%bigquery df
SELECT
  departure_delay,
  COUNT(1) AS num_flights,
  APPROX_QUANTILES(arrival_delay, 10) AS arrival_delay_deciles
FROM
  `bigquery-samples.airline_ontime_data.flights`
GROUP BY
  departure_delay
HAVING
  num_flights > 100
ORDER BY
  departure_delay ASC
The command makes use of the magic function %%bigquery. Magic functions in notebooks provide an alias for a system command. In this case, %%bigquery runs the query in the cell in BigQuery and stores the output in a Pandas DataFrame object named df.

Click Check my progress to verify the objective.
Execute a BigQuery query

Run the cell by hitting Shift + Enter, when the cursor is in the cell. Alternatively, if you navigate to the Run tab you can click on Run Selected Cells. Note the keyboard shortcut for this action in case it is not Shift + Enter. There should be no output when executing the command.

View the first five rows of the query's output by executing the following code in a new cell:

df.head()
4.png

Make a Plot with Pandas
We're going to use the Pandas DataFrame containing our query output to build a plot that depicts how arrival delays correspond to departure delays. Before continuing, if you are unfamiliar with Pandas the Ten Minute Getting Started Guide is recommended reading.

To get a DataFrame containing the data we need we first have to wrangle the raw query output. Enter the following code in a new cell to convert the list of arrival_delay_deciles into a Pandas Series object. The code also renames the resulting columns.

import pandas as pd

percentiles = df['arrival_delay_deciles'].apply(pd.Series)
percentiles.rename(columns = lambda x : '{0}%'.format(x*10), inplace=True)
percentiles.head()
Since we want to relate departure delay times to arrival delay times we have to concatenate our percentiles table to the departure_delay field in our original DataFrame. Execute the following code in a new cell:

df = pd.concat([df['departure_delay'], percentiles], axis=1)
df.head()
Before plotting the contents of our DataFrame, we'll want to drop extreme values stored in the 0% and 100% fields. Execute the following code in a new cell:

df.drop(labels=['0%', '100%'], axis=1, inplace=True)
df.plot(x='departure_delay', xlim=(-30,50), ylim=(-50,50));
5s.png

